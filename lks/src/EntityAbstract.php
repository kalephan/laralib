<?php
namespace Kalephan\LKS;

use Illuminate\Pagination\Paginator;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\Session;

abstract class EntityAbstract
{

    private $structure;
    private $model;
    private $cache_name;

    abstract public function __structure($structure);

    public function __construct()
    {
        $this->cache_name = lks_cache_name(__CLASS__ . '-entity') . '-@id-@entity';
        $this->structure = $this->structure();
        $this->model = new $this->structure->model();
    }

    public function structure()
    {
        if (! $this->structure) {
            $this->structureSet();
        }

        return $this->structure;
    }

    private function structureSet()
    {
        $cache_prefix = lks_cache_name(__METHOD__);
        $cache_name = $cache_prefix . get_called_class();

        if (! $this->structure = Cache::get($cache_name)) {
            $this->structureInit();
            $this->__structure($this->structure);

            event('lks.entityStructureAlter', $this->structure);
            event('lks.entityStructureAlter: ' . $this->structure->class, $this->structure);

            $this->structureValidate();

            Cache::forever($cache_name, $this->structure);
        }
    }

    private function structureInit()
    {
        $this->structure = new \stdClass();

        $this->structure->class = get_called_class();
        $this->structure->model = $this->structure->class . 'Model';
        $this->structure->title = '';
        $this->structure->id = 'id';
        $this->structure->fields = [];
        $this->structure->indelibility = [];
        $this->structure->order_by = ['id' => 'desc'];
        $this->structure->url_prefix = '';
        // CRUDL = create, read, update, delete and list
        $this->structure->actions = [
            'create' => ['url' => '@structure-url_prefix/create', 'title' => lks_lang('Thêm')],
            'read' => ['url' => '@structure-url_prefix/@id', 'title' => lks_lang('Xem')],
            'update' => ['url' => '@structure-url_prefix/update/@id', 'title' => lks_lang('Cập nhật')],
            'delete' => ['url' => '@structure-url_prefix/delete/@id', 'title' => lks_lang('Xóa')],
            'list' => ['url' => '@structure-url_prefix', 'title' => lks_lang('Danh sách')],
        ];
    }

    private function structureValidate()
    {
        foreach ($this->structure->fields as $key => $value) {
            $this->structure->fields[$key]['#name'] = empty($value['#name']) ? $key : $value['#name'];
            $this->structure->fields[$key]['#title'] = empty($value['#title']) ? $this->structure->fields[$key]['#name'] : $value['#title'];
        }
    }

    public function saveEntity($entity_new, $active_action = false)
    {
        $entity = ! empty($entity_new->{$this->structure->id}) ? $this->model->find($entity_new->{$this->structure->id}) : null;

        // Update an entity
        if (! empty($entity->{$this->structure->id})) {
            // Delete cache was generated by loadEntity
            Cache::forget(str_replace(['@id', '@entity'], [$entity->{$this->structure->id}, $this->structure->class], $this->cache_name));
        }// Create a new entity
        else {
            $entity = $this->model;
        }

        $this->saveEntityBuildData($entity, $entity_new);
        $entity->save();

        // Save reference fields from temp to database
        /*
         * if (count($reference)) {
         * $this->saveEntityReference($reference, $entity->{$this->structure->id});
         * }
         */

        event('lks.entitySaveEntity', $entity);
        event('lks.entitySaveEntity: ' . $this->structure->class, $entity);

        return $entity;
    }

    private function saveEntityBuildData($entity, $entity_new)
    {
        foreach ($this->structure->fields as $key => $field) {
            switch ($key) {
                case 'created_by':
                    if (! empty($entity_new->created_by)) {
                        break;
                    }
                case 'updated_by':
                    if (Auth::id() && ! $active_action) {
                        $entity[$key] = Auth::id();
                    }
                    break;

                default:
                    if (isset($entity_new->{$key}) &&
                        // this field is not empty
                        (! empty($entity_new->{$key}) ||
                        // OR this field is not require
                        empty($field['#required']))) {
                        $entity->{$key} = $entity_new->{$key};
                    }                    // Save default value for new entity create
                    elseif (isset($field['#default']) && empty($entity_new->{$this->structure->id})) {
                        $entity->{$key} = $field['#default'];
                    }
            }
        }

        event('lks.entitySaveEntityBuildData', $entity);
        event('lks.entitySaveEntityBuildData: ' . $this->structure->class, $entity);

        // Update waiting approve
        /*
         * if (!empty($this->structure['#approve'])// Use approve feature
         * && isset($this->structure->fields['approve'])// Have approve field
         * && !empty($entity_new->{$this->structure->id})//Not create new
         * ) {
         * $entity_approve_obj = lks_instance_get()->load('\Kalephan\LKS\Approve\ApproveEntity');
         *
         * if ($approve) {
         * $entity_approve_obj->deleteEntity($entity->approve);
         *
         * $entity->approve = null;
         * } else {
         * $approve_name = $this->structure->class . '-' . $entity_new->{$this->structure->id};
         *
         * //$entity->{$this->structure->id} = $entity_old->{$this->structure->id};
         * $entity->approve = $approve_name;
         *
         * $entity_approve = new \stdClass;
         * $entity_approve->key = $approve_name;
         * $entity_approve->value = $entity;
         * $entity_approve_obj->saveEntity($entity_approve);
         *
         * $entity = new \stdClass;
         * $entity->{$this->structure->id} = $entity_new->{$this->structure->id};
         * $entity->approve = $approve_name;
         * }
         * }
         */

        // Build reference
        /*
         * $reference = [];
         * foreach ($this->structure->fields as $key => $field) {
         * // Save Reference fields to temp
         * if (isset($field['#reference'])
         * && isset($entity->{$field['#name']})
         * && isset($field['#reference']['internal'])
         * && !$field['#reference']['internal']
         * ) {
         * $reference[$field['#name']] = is_array($entity->{$field['#name']}) ? array_filter($entity->{$field['#name']}) : [];
         * unset($entity->{$field['#name']});
         * }
         * }
         */
    }

    /*
     * private function _updateEntity($entity_new, $entity_old) {
     * foreach ($entity_new as $key => $value) {
     * $entity_old->$key = $value;
     * }
     * $entity_old->save();
     * }
     */

    /*
     * public function saveEntityReference($reference, $entity_id) {
     * $this->model->saveReference($reference, $entity_id, $this->structure);
     * }
     */
    public function convertEntityId($entity_id)
    {
        switch ($entity_id) {
            case 'me':
                if ($user_id = Auth::id()) {
                    return $user_id;
                }
                App::abort(403);

            case 'sess':
                return Session::getId();

            default:
                return $entity_id;
        }
    }

    public function searchEntity($column, $key, $limit = 0, $offset = 0)
    {
        $model = $this->model->select($this->structure->id);

        $column = is_array($column) ? $column : [$column];
        $i = 0;
        foreach ($column as $value) {
            if ($i) {
                $model->orWhere($value, 'LIKE', "%$key%");
            }
            else {
                $model->where($value, 'LIKE', "%$key%");
                $i++;
            }
        }

        if ($limit >= 0) {
            $limit = $limit ? $limit : config('lks.items_per_page');
            $model->take($limit)->skip($offset);
        }

        return $this->_loadEntityAll($model->get());
    }

    public function loadEntity($entity_id, $check_active = false)
    {
        $entity_id = $this->convertEntityId($entity_id);

        $cache_name = str_replace(['@id', '@entity'], [$entity_id, $this->structure->class], $this->cache_name);
        if ($cache = Cache::get($cache_name)) {
            if (! $check_active) {
                return $cache;
            } elseif (! isset($this->structure->fields['active']) || $cache->active == 1) {
                return $cache;
            } else {
                return null;
            }
        }

        if ($entity = $this->model->find($entity_id)) {
            foreach ($this->structure->fields as $key => $field) {
                if (isset($field['#reference']) && $entity->$key) {
                    $reference = new $field['#reference']['class'];
                    $entity->$key = $reference->loadEntity($entity->$key);
                }
            }

            event('lks.entityLoadEntity', $entity);
            event('lks.entityLoadEntity: ' . $this->structure->class, $entity);

            Cache::forever($cache_name, $entity);
        }

        return $entity;
    }

    public function loadEntityWhere($where)
    {
        $cache_name = lks_cache_name(__METHOD__) .  str_replace(['@id', '@entity'], [serialize($where), $this->structure->class], $this->cache_name);
        $cache = Cache::get($cache_name);

        if (!$cache) {
            $model = $this->model->select($this->structure->id);

            foreach ($where as $value) {
                if (count($value) == 3) {
                    $model = $model->where($value[0], $value[1], $value[2]);
                }
            }

            $cache = $this->_loadEntityAll($model->get());
            lks_cache_set($cache_name, $cache);
        }

        return $cache;
    }

    public function loadEntityPaginate($items_per_page = null)
    {
        $items_per_page = $items_per_page ? $items_per_page : config('lks.items_per_page', 20);

        $db = $this->model->select($this->structure->id);
        if (count($this->structure->order_by)) {
            foreach ($this->structure->order_by as $key => $value) {
                $db->orderBy($key, $value);
            }
        }

        $paginator = $db->paginate($items_per_page);
        $paginator->appends(Request::except('page'));

        return [
            'paginator' => $paginator,
            'entities' => $this->_loadEntityAll($paginator->all())
        ];
    }

    public function loadEntityAll()
    {
        $entities = $this->model->select($this->structure->id)->all();

        return $this->_loadEntityAll($entities);
    }

    private function _loadEntityAll($entities)
    {
        foreach ($entities as $key => $value) {
            $entities[$key] = $this->loadEntity($value->{$this->structure->id});
        }

        return $entities;
    }

    public function deleteEntity($entity_ids)
    {
        $entity_ids = (array) $entity_ids;

        if ($this->structure->indelibility) {
            $entity_ids = array_diff($entity_ids, $this->structure->indelibility);
        }

        if (count($entity_ids)) {
            foreach ($entity_ids as $value) {
                Cache::forget(str_replace([
                    '@id',
                    '@entity'
                ], [
                    $value,
                    $this->structure->class
                ], $this->cache_name));
            }

            $this->model->destroy($entity_ids);
        }
    }

    public function isOwn($entity)
    {
        if (! is_object($entity)) {
            $entity = $this->loadEntity($entity);
        }

        if (isset($entity->created_by) && $entity->created_by == Auth::id()) {
            return true;
        }

        return false;
    }

    public function formCreate($form)
    {
        $this->formCreateUpdate($form);
        $form->message = lks_lang('Dữ liệu của bạn đã được lưu thành công.');
    }

    public function formUpdate($form)
    {
        $this->formCreateUpdate($form);
        $form->message = lks_lang('Dữ liệu của bạn đã được cập nhật thành công.');

        // Add ID field.
        $form->fields[$this->structure->id] = [
            '#name' => $this->structure->id,
            '#type' => 'hidden',
            '#disabled' => true
        ];
    }

    public function formCreateUpdate($form)
    {
        $fields = $this->structure->fields;
        foreach ($fields as $key => $value) {
            if (empty($value['#type'])) {
                continue;
            }

            if (isset($value['#default'])) {
                $fields[$key]['#value'] = $value['#default'];
            }

            if ($value['#type'] == 'file') {
                $form->form['files'] = true;

                if ($value['#widget'] == 'image' && ! isset($value['#validate'])) {
                    $fields[$key]['#validate'] = config('lks.file_image_rule', 'image|mimes:jpeg,png');
                }
            }
        }

        $fields['_entity'] = array(
            '#name' => '_entity',
            '#type' => 'hidden',
            '#value' => $this->structure->class,
            '#disabled' => true
        );

        $form->fields = array_merge($form->fields, $fields);
        $form->actions['submit']['#value'] = lks_lang('Lưu');
        $form->submit[] = get_called_class() . '@formCreateUpdateSubmit';

        if (isset($this->structure->actions['list'])) {
            $form->redirect = lks_entity_token_trans($this->structure->actions['list']['url'], null, $this->structure);
        }
    }

    public function formCreateUpdateSubmit($form, &$form_values)
    {
        $entity = new \stdClass();

        foreach ($this->structure->fields as $key => $value) {
            if (isset($form_values[$key])) {
                if (isset($value['#type'])) {
                    $item = new \stdClass();
                    $item->value = $form_values[$key];
                    event('lks.entityFormCreateUpdateSubmit.' . $value['#type'], $item, $value);
                    $form_values[$key] = $item->value;
                }

                $entity->{$key} = $form_values[$key];
            } elseif (isset($value['#default']) &&
                // Don't set default value for update
                !isset($form_values[$this->structure->id])) {
                $entity->{$key} = $value['#default'];
            }
        }

        $form_values[$this->structure->id] = $this->saveEntity($entity);
    }

    /*
     * public function loadOptionsAll() {
     * $entities = $this->loadEntityAll();
     *
     * $result = [];
     * foreach ($entities as $value) {
     * $value = $this->loadEntity($value->{$this->structure->id});
     *
     * $result[$value->{$this->structure->id}] = isset($value->title) ? $value->title : $value->{$this->structure->id};
     * }
     *
     * return $result;
     * }
     *
     * public function showRead($lks, $entity_id) {
     * $entity = $this->loadEntity($entity_id, [], true);
     * if (!$entity) {
     * App::abort(404);
     * }
     *
     * if (!empty($entity->title)) {
     * $lks->response->addTitle($entity->title);
     * }
     *
     * $this->showReadExecutive($lks, $entity);
     * }
     *
     * public function showList($lks) {
     * // Load from DB with pagination
     * $pager_items_per_page = config('lks.pagination items per page', 20);
     * $pager_page = intval($lks->request->query('page'));
     * $pager_from = $pager_page > 0 ? ($pager_page - 1) : 0;
     * $pager_from = $pager_from * $pager_items_per_page;
     * $attributes = array(
     * 'pagination' => array(
     * 'start' => $pager_from,
     * 'length' => $pager_items_per_page,
     * ),
     * );
     * $pager_total = 0;
     * $entities = EntityModel::loadEntityAll($this->structure, $attributes, $pager_total);
     *
     * // Build data table
     * $data = array(
     * 'header' => [],
     * 'rows' => [],
     * );
     * //kd($this->structure->fields);
     * foreach ($this->structure->fields as $key => $value) {
     * if (empty($value['#list_hidden'])) {
     * $data['header'][] = ['data' => $value['#title']];
     * }
     * }
     *
     * // Add Operations column
     * $data['header'][] = ['data' => lks_lang('Hoạt động')];
     *
     * if (count($entities)) {
     * foreach ($entities as $entity) {
     * $row = ['data' => []];
     * $entity = $this->loadEntity($entity->{$this->structure->id});
     * foreach ($entity as $key => $value) {
     * if (empty($this->structure->fields[$key]['#list_hidden'])) {
     * switch ($key) {
     * case 'active':
     * if (!empty($this->structure->fields['active']['#options'][$entity->active])) {
     * $value = $this->structure->fields['active']['#options'][$entity->active];
     * }
     * break;
     *
     * case 'created_by':
     * case 'updated_by':
     * $user = lks_instance_get()->load('\Kalephan\User\UserEntity');
     * $user = $user->loadEntity($value);
     *
     * $user_view_url = '';
     * $value = $user_view_url ? lks_anchor($user_view_url, $user->username) : $user->username;
     *
     * break;
     * }
     *
     * $row['data'][] = ['data' => $value];
     * }
     * }
     *
     * //Operations column
     * $row['data'][] = ['data' => implode(', ', lks_entity_contextual_link_get($entity, $this->structure))];
     *
     * $data['rows'][] = $row;
     * }
     * }
     *
     * // Return to browser
     * $vars = array(
     * 'data' => $data,
     * 'add_new' => !empty($this->structure['#action_links']['create']) ? $this->structure['#action_links']['create'] : '',
     * 'pager_items_per_page' => $pager_items_per_page,
     * 'pager_page' => $pager_page,
     * 'pager_total' => $pager_total,
     * 'pager_from' => min($pager_from + 1, $pager_total),
     * 'pager_to' => min($pager_total, $pager_from + $pager_items_per_page),
     * );
     * $template = 'entity_list-' . $this->structure->table;
     * if (!View::exists($template)) {
     * $template = 'entity_list';
     * }
     * return $lks->response->addContent(lks_render($template, $vars));
     * }
     */

    // public function showUpdate($lks, $entity_id) {
    /*
     * $entity = $this->loadEntity($entity_id);
     * if (!$entity) {
     * App::abort(404);
     * }
     */

    // COMMENTED
    /*
     * $entity_approve = lks_instance_get()->load('\Kalephan\LKS\Approve\ApproveEntity');
     * if (!empty($this->structure['#approve'])
     * && !empty($entity->approve)
     * && $approve = $entity_approve->loadEntity($entity->approve)
     * ) {
     * $entity = $approve;
     * $lks->response->addMessage(lks_lang('":entity_title" đang chờ phê duyệt của quản trị viên. Các dữ liệu cũ vẫn còn được sử dụng để hiển thị. <br />Sau khi phê duyệt thành công, các dữ liệu mới sẽ được chính thức cập nhật.', [':entity_title' => $this->structure['#title']]), 'warning');
     * } elseif (isset($entity->active)
     * && $entity->active != 1
     * ) {
     * $lks->response->addMessage(lks_lang('":entity_title" đang chờ phê duyệt của quản trị viên. Bạn có thể cập nhật nội dung mới, nhưng ":entity_title" sẽ không được hiển thị trên trang web.', [':entity_title' => $this->structure['#title']]), 'warning');
     * }
     */

    /*
     * $form_values = lks_object_to_array($entity);
     *
     * $lks->response->addContent(Form::build($this->structure->class . '@showUpdateForm', $form_values));
     */
    // }

    /*
     * public function showClone($lks, $entity_id) {
     * $form_values = $this->loadEntity($entity_id);
     * if (!$form_values) {
     * App::abort(404);
     * }
     *
     * $lks->response->addContent(Form::build($this->structure->class . '@showCloneForm', $form_values));
     * }
     *
     * public function showCloneForm() {
     * $form = $this->_showCreateForm();
     * unset($form[$this->structure->id]);
     *
     * return $form;
     * }
     *
     * public function showUpdateForm() {
     * return $this->_showCreateForm();
     * }
     *
     * public function showPreview($lks, $entity_id) {
     * $entity = $this->loadEntity($entity_id, array('cache' => false));
     * if (!$entity) {
     * App::abort(404);
     * }
     *
     * $this->showReadExecutive($lks, $entity);
     * }
     *
     * public function showReadExecutive($lks, $entity) {
     * $lks = lks_instance_get();
     *
     * $event = array(
     * 'entity' => &$entity,
     * 'structure' => $this->structure,
     * );
     * event('entity.showReadExecutive', $event);
     * $entity = $event['entity'];
     *
     * $data = [];
     * $data['entity'] = $entity;
     * foreach ($this->structure->fields as $key => $val) {
     * if (empty($val['#display_hidden'])) {
     * if (isset($val['#options_callback'])) {
     * $val['#options_callback']['arguments'] = isset($val['#options_callback']['arguments']) ? $val['#options_callback']['arguments'] : [];
     * $val['#options_callback']['class'] = explode('@', $val['#options_callback']['class']);
     * $val['#options'] = call_user_func_array(array($lks->load($val['#options_callback']['class'][0]), $val['#options_callback']['class'][1]), $val['#options_callback']['arguments']);
     * }
     *
     * if (isset($val['#options'])) {
     * $entity->$key = (array) $entity->$key;
     * foreach ($entity->$key as $k => $v) {
     * if (isset($val['#options'][$v])) {
     * $entity->{$key}[$k] = $val['#options'][$v];
     * }
     * }
     * $entity->$key = implode(', ', $entity->$key);
     * }
     *
     * switch ($key) {
     * case 'created_by':
     * case 'updated_by':
     * $user = $lks->load('\Kalephan\User\UserEntity');
     * $user = $user->loadEntity($entity->$key);
     * if (!empty($user->username)) {
     * $entity->$key = $user->username;
     * }
     * break;
     * }
     *
     * if (isset($val['#type'])) {
     * $event = array(
     * 'value' => &$entity->$key,
     * 'field' => &$val,
     * );
     * event('entity.showReadExecutive.' . $val['#type'], $event);
     * $entity->$key = $event['value'];
     * $val = $event['field'];
     * }
     *
     * $data['element'][$key] = array(
     * 'title' => isset($val['#title']) ? $val['#title'] : '',
     * 'value' => $entity->$key,
     * );
     * }
     * }
     *
     * $template = 'entity_read-' . $this->structure->table;
     * if (!View::exists($template)) {
     * $template = 'entity_read';
     * }
     * $lks->response->addContent(lks_render($template, $data));
     * }
     *
     * // Create & Update
     * public function showDelete($lks, $entity_id) {
     * $entity = $this->loadEntity($entity_id, array('cache' => false));
     * if (!$entity) {
     * App::abort(404);
     * }
     *
     * $title = isset($entity->title) ? $entity->title : $entity_id;
     *
     * $form_values['notice'] = lks_lang('Bạn có thực sự muốn xóa: :title?', [':title' => $title]);
     * $form_values['entity_id'] = $entity_id;
     *
     * $lks->response->addContent(Form::build($this->structure->class . '@showDeleteForm', $form_values));
     * }
     *
     * public function showDeleteForm() {
     * $form = [];
     *
     * $form['notice'] = array(
     * '#name' => 'notice',
     * '#type' => 'markup',
     * );
     *
     * $form['entity_id'] = array(
     * '#name' => 'entity_id',
     * '#type' => 'hidden',
     * '#disabled' => true,
     * );
     *
     * $form->actions['submit'] = array(
     * '#name' => 'submit',
     * '#type' => 'submit',
     * '#value' => lks_lang('OK'),
     * );
     *
     * $form->actions['cancel'] = array(
     * '#name' => 'cancel',
     * '#type' => 'markup',
     * '#value' => '<a href="javascript:history.back()">' . lks_lang('Hủy') . '</a>',
     * );
     *
     * $form->submit[] = $this->structure->class . '@showDeleteFormSubmit';
     * $form->message = lks_lang('Dữ liệu của bạn đã được xóa thành công.');
     * if (!empty($this->structure['#action_links']['list'])) {
     * $form['#redirect'] = lks_url($this->structure['#action_links']['list']);
     * }
     *
     * return $form;
     * }
     *
     * public function showDeleteFormSubmit($form_id, &$form, &$form_values) {
     * $this->deleteEntity($form_values['entity_id']);
     * }
     *
     * public function showEmptyField($lks, $entity_id, $field) {
     * $entity = $this->loadEntity($entity_id);
     *
     * if (isset($entity->{$field})) {
     * $entity->{$field} = '';
     * $this->saveEntity($entity);
     * }
     * }
     *
     * public function showActive($lks, $entity_id) {
     * $entity = $this->loadEntity($entity_id);
     *
     * $entity->active = 1;
     * $this->saveEntity($entity, true);
     *
     * $entity->title = !empty($entity->title) ? $entity->title : $entity->{$this->structure->id};
     * $lks->response->addMessage(lks_lang('"%entity_title" đã được kích hoạt thành công', ['%entity_title' => $entity->title]));
     * }
     */
}